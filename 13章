//13.8
//核心：1.switch语句；2.指针的初始化；
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int compute_scrabble_value(const char* word);

int main(void) {
	printf("Enter a word:");
	char word[50];
    scanf_s("%s", word,50);
	char* str = word;
	printf("Scrabble value: %d\n", compute_scrabble_value(str));
	return 0;
}

int compute_scrabble_value(const char* word) {
	int value = 0;
	int i = 0;
	while (1) {
		switch (toupper(word[i]))
		{
		case 'A':case 'E': case 'I':case 'L':case 'N':case 'O':case 'R':case 'S':
		case 'T':case 'U':
			value += 1;
			break;
		case 'D':case 'G':
			value += 2;
			break;
		case 'B':case 'C':case 'M':case 'P':
			value += 3;
			break;
		case 'F':case 'H':case 'V':case 'W':case 'Y':
			value += 4;
			break;
		case 'K':
			value += 5;
			break;
		case 'J':case 'X':
			value += 8;
			break;
		case 'Q':case 'Z':
			value += 10;
			break;
		default:
			break;
		}
		i++;
		if (word[i] == '\0') {
			return value;
		}
	}
}
//13.9
//核心：fgets()的用法
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int compute_vowel_count(const char* sentence);

int main(void) {
	char sentence[50];
	printf("Enter a sentence: ");
	char *str = fgets(sentence,50,stdin);
	printf("Your sentence contains %d vowels\n", compute_vowel_count(str));
}

int compute_vowel_count(const char* sentence) {
	int count = 0;
	int i = 0;
	char c;
	while (1) {
		c = tolower(sentence[i]);
		if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count++;
		if (sentence[i++] == '\0') return count;
	}
}
//13.10
//核心：1.使用getchar()；2.数组的初始化
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void reverse_name(char* name);

int main(void) {
	char c, name[50] = {' '};
	int i = 0;
	printf("Enter a first and Last name: ");
	while ((c = getchar())!= '\n') {
		if (c != ' ') {
			name[i++] = c;
		}
	}
	char* str = name;
	reverse_name(str);
}

void reverse_name(char* name) {
	int i = 1, j = 0,flag = 0;
	char first, last[50] = {' '};
	first = name[0];
	while (1) {
		if (name[i] <= 'Z' && name[i] >= 'A') {
			last[j++] = name[i];
			flag = 1;
		}
		else if(name[i] == '\0')
		{
			printf("%s, %c.",last,first);
			break;
		}
		else if (name[i] <= 'z' && name[i] >= 'a' && flag == 1) {
			last[j++] = name[i];
		}
		i++;
	}
}
//13.11
//核心：1.fgets()会读入换行符；2.浮点数的处理
#include <stdio.h>
#include <string.h>
#include <ctype.h>

double compute_average_word_length(const char* sentence);

int main(void) {
	char sentence[50];
	printf("Enter a sentence: ");
	char *str= fgets(sentence, 50, stdin);
	printf("Average word length: %.1f\n", compute_average_word_length(str));
}

double compute_average_word_length(const char* sentence) {
	int lenght[50],i = 0,j = 0,len = 0;
	bool flag = false;
	while (sentence[i] != '\n') {
		if (sentence[i]!=' ') {
			flag = true;
			len++;
		}
		else if (sentence[i] == ' '&&flag == true) {
			flag = false;
			lenght[j++] = len;
			len = 0;
		}
		i++;
	}
	if (len != 0) {
		lenght[j++] = len;
		len = 0;
	}
	float sum = 0.0;
	for (int i = 0; i < j; i++) {
		sum += lenght[i];
	}
	return sum / (float)j;
}
//13.12
//核心：二维字符数组的应用
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_COUNT  30
#define MAX_LEN    20

int main(void) {
	bool flag = false;
	char words[MAX_LEN][MAX_COUNT] = { ' ' },c;
	int i = 0, j = 0;
	printf("Enter a sentence: ");
	while (1) {
		c = getchar();
		if (c == '?' || c == '.' || c == '!') {
			words[i][j] = '\0';
			break;
		}
		else if (c == ' '&&flag == true) {
			words[i][j] = '\0';
			i++;
			j = 0;
		}
		else {
			flag = true;
			words[i][j++] = c;
		}
	}

	printf("Reversal of sentene: ");
	for (; i >= 0; i--) {	
		if (i == 0) {
			printf("%s%c", words[i], c);
		}
		else {
			printf("%s ", words[i]);
		}
	}
}
//13.13
//核心：写出转换的表达式
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void encrypt(char* message, int shift);

int main(void) {
	char message[80];
	int shift;
	printf("Enter message tobe encrypted: ");
	char* str = fgets(message, 80, stdin);
	printf("Enter shift amount(1-25): ");
	scanf_s("%d", &shift);
	encrypt(str, shift);
	printf("Encryptd message：%s", message);
}



void encrypt(char* message, int shift) {
	int i = 0;
	while (message[i] != '\n') {
		if (message[i] >= 'A' && message[i] <= 'Z') {
			message[i] = (message[i] - 'A'+shift) % 26 + 'A';
		}
		else if (message[i] >= 'a' && message[i] <= 'z') {
			message[i] = (message[i] - 'a'+shift) % 26 + 'a';
		}
		i++;
	}
}
//13.14
//核心：检测变位词的方法
#include <stdio.h>
#include <string.h>
#include <ctype.h>

bool are_anagrams(const char* word1, const char* word2);

int main(void) {
	char word1[50], word2[50];
	printf("Enter first word: ");
	char* str1 = fgets(word1, 50, stdin);
	printf("Enter second word: ");
	char* str2 = fgets(word2, 50, stdin);
	if (are_anagrams(str1, str2)) printf("The words are anagrams.\n");
	else printf("The words are not anagrams.\n");

	return 0;
}

bool are_anagrams(const char* word1, const char* word2) {
	int flag[26] = { 0 }, i = 0;
	while (word1[i] != '\n') {
		if (isalpha(word1[i])) {
			flag[tolower(word1[i]) - 'a'] ++;
		}
		i++;
	}
	i = 0;
	while (word2[i] != '\n') {
		if (isalpha(word2[i])) {
			flag[tolower(word2[i]) - 'a']--;
		}
		i++;
	}
	for (i = 0; i < 26; i++) {
		if (flag[i] != 0) return false;
	}
	return true;
}
